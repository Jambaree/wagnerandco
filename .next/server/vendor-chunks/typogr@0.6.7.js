/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/typogr@0.6.7";
exports.ids = ["vendor-chunks/typogr@0.6.7"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/typogr@0.6.7/node_modules/typogr/typogr.js":
/*!***********************************************************************!*\
  !*** ./node_modules/.pnpm/typogr@0.6.7/node_modules/typogr/typogr.js ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__; /*!\n  * typogr.js\n  * Copyright(c) 2011 Eugene Kalinin\n  * MIT Licensed\n  */\n\n(function (root) {\n\n  /** Main typogr function */\n  var typogr = function (obj) { return new Wrapper(obj); };\n\n  // Current version\n  typogr.version = '0.6.7';\n\n  // Export the typogr object. In server-side for `require()` API.\n  // If we're not in CommonJS, add `typogr` to the global object.\n  if ( true && module.exports) {\n    module.exports = typogr;\n   } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return typogr; }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n  // typogr functions\n  // ---------------------\n\n  var re = function (regexp, flag) {\n    return new RegExp(regexp, flag);\n  };\n\n  // RegExp for skip some tags\n  var re_skip_tags = /<(\\/)?(style|pre|code|kbd|script|math|title)[^>]*>/i;\n\n  /**\n   * Wraps apersands in HTML with ``<span class=\"amp\">`` so they can be\n   * styled with CSS. Apersands are also normalized to ``&amp;``. Requires \n   * ampersands to have whitespace or an ``&nbsp;`` on both sides.\n   *\n   */\n  var amp = typogr.amp = function(text) {\n    var re_amp = /(\\s|&nbsp;)(&|&amp;|&\\#38;)(\\s|&nbsp;)/g\n                //(    $1   )(     $2       )(   $3    )\n      , re_intra_tag = /(<[^<]*>)?([^<]*)(<\\/[^<]*>)?/g;\n                      //( prefix) ( txt )(  suffix )\n    if( !text && typeof text !== \"string\" ) {\n      return;\n    }\n    return text.replace(re_intra_tag, function (str, prefix, text, suffix) {\n      prefix = prefix || '';\n      suffix = suffix || '';\n      if (prefix.match(re_skip_tags)) return prefix + text + suffix;\n      text = text.replace(re_amp, '$1<span class=\"amp\">&amp;</span>$3');\n\n      return prefix + text + suffix;\n    });\n  };\n\n  /**\n   * Wraps date suffix in <span class=\"ord\"> so they can be styled with CSS.\n   *\n   */\n  var ord = typogr.ord = function(text) {\n    if( !text && typeof text !== \"string\" ) {\n      return;\n    }\n\n    var tokens = tokenize(text)\n      , result = []\n      , in_skipped_tag = false\n      , close_match\n      , re_suffix = /(\\d+)(st|nd|rd|th)/g;\n                  //  $1        $2\n\n    tokens.forEach( function (token) {\n\n      if (token.type === 'tag') {\n        result.push(token.txt);\n\n        close_match = re_skip_tags.exec(token.txt);\n        if (close_match && close_match[1] === undefined) {\n          in_skipped_tag = true;\n        } else {\n          in_skipped_tag = false;\n        }\n      }\n      else {\n        if (in_skipped_tag) {\n          result.push(token.txt);\n        }\n        else {\n          result.push(token.txt.replace(re_suffix, '$1<span class=\"ord\">$2</span>'));\n        }\n      }\n    });\n\n    return result.join('');\n\n  };\n\n  /**\n   * Wraps initial quotes in ``class=\"dquo\"`` for double quotes or ``class=\"quo\"``\n   * for single quotes. Works in these block tags ``(h1-h6, p, li, dt, dd)``\n   * and also accounts for potential opening inline elements ``a, em, strong, span, b, i``\n   *\n   */\n  var initQuotes = typogr.initQuotes = function(text) {\n    var re_quote = re(\n            '(?:(?:<(?:p|h[1-6]|li|dt|dd)[^>]*>|^)'+  // start with an opening\n                                                      // p, h1-6, li, dd, dt\n                                                      // or the start of the string\n            '\\\\s*'+                                   // optional white space!\n            '(?:<(?:a|em|span|strong|i|b)[^>]*>\\\\s*)*)'+//optional opening inline tags,\n                                                      // with more optional white space for each.\n            '(?:(\"|&ldquo;|&#8220;)|'+                // Find me a quote! /only need to find\n             '(\\'|&lsquo;|&#8216;))'                  // the left quotes and the primes/\n          , 'i');\n\n    if( !text && typeof text !== \"string\" ) {\n      return;\n    }\n    return text.replace(re_quote, function (matched_str, dquo, squo) {\n      var classname = dquo ? \"dquo\" : \"quo\"\n        , quote = dquo ? dquo : squo;\n\n      return [matched_str.slice(0, matched_str.lastIndexOf(quote)),   // all before quote\n        '<span class=\"', classname, '\">', quote, '</span>'].join('');\n    });\n  };\n\n  /**\n   * Replaces the space between the last two words in a string with ``&nbsp;``\n   * Works in these block tags ``(h1-h6, p, li, dd, dt)`` and also accounts for\n   * potential closing inline elements ``a, em, strong, span, b, i``\n   *\n   */\n  var widont = typogr.widont = function(text) {\n    var inline_tags = 'a|em|span|strong|i|b'\n    var word = '(?:<(?:'+inline_tags+')[^>]*?>)*?[^\\\\s<>]+(?:</(?:'+inline_tags+')[^>]*?>)*?'\n    var re_widont = re(\n          '('+                                                     // matching group 1\n            '\\\\s+'+word+                                           // space and a word with a possible bordering tag\n            '\\\\s+'+word+                                           // space and a word with a possible bordering tag\n          ')'+\n          '(?:\\\\s+)'+                                              // one or more space characters\n          '('+                                                     // matching group 2\n            '[^<>\\\\s]+'+                                           // nontag/nonspace characters\n            '(?:\\\\s*</(?:a|em|span|strong|i|b)[^>]*?>\\\\s*\\\\.*)*?'+ // one or more inline closing tags\n                                                                   // can be surronded by spaces\n                                                                   // and followed by a period.\n            '(?:\\\\s*?</(?:p|h[1-6]|li|dt|dd)>|$)'+                 // allowed closing tags or end of line\n          ')', 'gi');\n    return text.replace(re_widont, '$1<span class=\"widont\">&nbsp;</span>$2');\n  };\n\n  /**\n   * Wraps multiple capital letters in ``<span class=\"caps\">``\n   * so they can be styled with CSS.\n   *\n   */\n  var caps = typogr.caps = function(text) {\n    var tokens = tokenize(text)\n      , result = []\n      , in_skipped_tag = false\n      , close_match\n      , re_cap = re(\n          '('+\n            '(\\\\b[A-Z\\\\d]*'+      // Group 2: Any amount of caps and digits\n            '[A-Z]\\\\d*[A-Z]'+     // A cap string must at least include two caps\n                                  // (but they can have digits between them)\n            '[A-Z\\\\d\\']*\\\\b)'+    // Any amount of caps and digits or dumb apostsrophes\n            '|(\\\\b[A-Z]+\\\\.\\\\s?'+  // OR: Group 3: Some caps, followed by a '.' and an optional space\n            '(?:[A-Z]+\\\\.\\\\s?)+)'+ // Followed by the same thing at least once more\n            '(?:\\\\s|\\\\b|$)'+\n          ')', 'g'\n        );\n\n      tokens.forEach( function (token) {\n\n        if (token.type === 'tag') {\n          result.push(token.txt);\n\n          close_match = re_skip_tags.exec(token.txt);\n          if (close_match && close_match[1] === undefined) {\n            in_skipped_tag = true;\n          } else {\n            in_skipped_tag = false;\n          }\n        }\n        else {\n          if (in_skipped_tag) {\n            result.push(token.txt);\n          }\n          else {\n            result.push(token.txt.replace(re_cap, function (matched_str, g1, g2, g3) {\n              // This is necessary to keep dotted cap strings to pick up extra spaces\n              var caps, tail;\n              if ( g2 ) {\n                return '<span class=\"caps\">%s</span>'.replace('%s', g2);\n              } else {\n                if ( g3.slice(-1) === ' ' ) {\n                  caps = g3.slice(0, -1);\n                  tail = ' ';\n                } else {\n                  caps = g3;\n                  tail = '';\n                }\n                return '<span class=\"caps\">%s1</span>%s2'.replace('%s1', caps).replace('%s2', tail);\n              }\n            }));\n          }\n        }\n      });\n\n      return result.join('');\n  };\n\n  /**\n   * Applies the following filters: widont, smartypants,\n   * amp, quotes\n   */\n  typogr.typogrify = function(src) {\n    var text = src;\n    if (src.jquery && src.html) {\n      text = src.html();\n    }\n\n    text = amp(text);\n    text = widont(text);\n    text = smartypants(text);\n    text = caps(text);\n    text = initQuotes(text);\n    text = ord(text);\n    return text;\n  };\n\n  // SmartyPants functions\n  // ---------------------\n\n  /**\n   * Translates plain ASCII punctuation characters into \n   * \"smart\" typographic punctuation HTML entities.\n   */\n  var smartypants = typogr.smartypants = function(text) {\n    var tokens = tokenize(text)\n      , result = []\n      , skipped_tag_stack = []\n      , skipped_tag = ''\n      , skip_match = ''\n      , in_pre = false\n        // This is a cheat, used to get some context for one-character\n        // tokens that consist of just a quote char. What we do is remember\n        // the last character of the previous text token, to use as context\n        // to curl single-character quote tokens correctly.\n      , prev_token_last_char = ''\n      , last_char\n        // current token\n      , t;\n\n    tokens.forEach( function (token) {\n      if (token.type === 'tag') {\n        // Don't mess with quotes inside some tags.\n        // This does not handle self <closing/> tags!\n        result.push(token.txt);\n\n        // is it a skipped tag ?\n        if ( (skip_match = re_skip_tags.exec(token.txt)) !== null  ) {\n          skipped_tag = skip_match[2].toLowerCase();\n\n          // closing tag\n          if ( skip_match[1] ) {\n            if ( skipped_tag_stack.length > 0 ) {\n              if ( skipped_tag === skipped_tag_stack[skipped_tag_stack.length-1] ) {\n                skipped_tag_stack.pop();\n              }\n            }\n            if (skipped_tag_stack.length === 0) {\n              in_pre = false;\n            }\n          }\n          // opening tag\n          else {\n            skipped_tag_stack.push(skipped_tag);\n            in_pre = true;\n          }\n        }\n      } else {\n        t = token.txt;\n\n        // Special case rock ’n’ roll—use apostrophes\n        t = t.replace(/(rock )'n'( roll)/gi, '$1&#8217;n&#8217;$2');\n\n        // Remember last char of this token before processing\n        last_char = t.slice(-1);\n\n        if ( !in_pre ) {\n          t = smartEscapes(t);\n          t = smartDashes(t);\n          t = smartEllipses(t);\n          // backticks need to be processed before quotes\n          t = smartBackticks(t);\n          // quotes\n          switch(t) {\n            case \"'\": // Special case: single-character ' token\n              if (/\\S/.test(prev_token_last_char)) {  t = '&#8217;'; }\n                                              else {  t = '&#8216;'; }\n              break;\n            case '\"': // Special case: single-character \" token\n              if (/\\S/.test(prev_token_last_char)) {  t = '&#8221;'; }\n                                              else {  t = '&#8220;'; }\n              break;\n            default:  // Normal case\n              t = smartQuotes(t);\n          }\n        }\n\n        prev_token_last_char = last_char;\n        result.push(t);\n      }\n    });\n\n    return result.join('');\n  };\n\n  /**\n   * Returns an array of the tokens comprising the input string.\n   * Each token is either a tag (possibly with nested, tags contained\n   * therein, such as <a href=\"<MTFoo>\">, or a run of text between tags.\n   * Each element of the array is an object with properties 'type' and 'txt';\n   * Values for 'type': 'tag' or 'text'; 'txt' is the actual value.\n   *\n   */\n  var tokenize = typogr.tokenize = function(text) {\n    var tokens = []\n      , lastIndex = 0\n      , re_tag = /([^<]*)(<[^>]*>)/gi\n      , curr_token;\n\n    while ( (curr_token = re_tag.exec(text)) !== null ) {\n      var pre_text = curr_token[1]\n        , tag_text = curr_token[2];\n\n      if (pre_text) {\n        tokens.push({ type: 'text', txt: pre_text });\n      }\n      tokens.push({ type: 'tag', txt: tag_text });\n      lastIndex = re_tag.lastIndex;\n    }\n\n    if (re_tag.lastIndex <= text.length) {\n        // if last char is a dot and not a '…'\n        // then push two tokens\n        if (text.slice(-1) == \".\" && text.slice(-2) != '..' ) {\n          tokens.push({ type: 'text', txt: text.slice(lastIndex, text.length-1) });\n          tokens.push({ type: 'text', txt: text.slice(-1) });\n        }\n        else {\n          tokens.push({ type: 'text', txt: text.slice(lastIndex) });\n        }\n    }\n\n    return tokens;\n  };\n\n  /**\n   * Returns input string, with after processing the following backslash\n   * escape sequences. This is useful if you want to force a \"dumb\"\n   * quote or other character to appear.\n   *\n   */\n  var smartEscapes = typogr.smartEscapes = function(text) {\n    return text.replace(/\\\\\"/g,   '&#34;')\n               .replace(/\\\\'/g,   '&#39;')\n               .replace(/\\\\-/g,   '&#45;')\n               .replace(/\\\\\\./g,  '&#46;')\n               .replace(/\\\\\\\\/g,  '&#92;')\n               .replace(/\\\\`/g,   '&#96;');\n  };\n\n  /**\n   * Returns input text, with each instance of \"--\"\n   * translated to an em-dash HTML entity.\n   *\n   */\n  var smartDashes = typogr.smartDashes = function(text) {\n    return text.replace(/---/g, '&#8212;')    // em  (yes, backwards)\n               .replace(/([^<][^!]|[^!]|^)--(?!>)/g,  '$1&#8211;');  // en  (yes, backwards)\n  };\n\n  /**\n   * Returns input string, with each instance of \"...\"\n   * translated to an ellipsis HTML entity.\n   *\n   */\n  var smartEllipses = typogr.smartEllipses = function(text) {\n    return text.replace(/\\.\\.\\./g,    '&#8230;')\n               .replace(/\\. \\. \\./g,  '&#8230;');\n  };\n\n  /**\n   * Returns input string, with ``backticks'' -style double quotes\n   * translated into HTML curly quote entities.\n   *\n   */\n  var smartBackticks = typogr.smartBackticks = function(text) {\n    return text.replace(/``/g,  '&#8220;')\n               .replace(/''/g,  '&#8221;');\n  };\n\n\n  /**\n   * Returns input string, with \"educated\" curly quote\n   * HTML entities.\n   *\n   */\n  var smartQuotes = typogr.smartQuotes = function(text) {\n    var punct_cls     = '[!\"#\\\\$\\\\%\\\\\\'()*+,-.\\\\/:;<=>?\\\\@\\\\[\\\\\\\\]\\\\^_`{|}~]'\n      , re_punct_str  = '(?=%s\\\\B)'.replace('%s', punct_cls)\n      , close_cls = '[^\\\\ \\\\t\\\\r\\\\n\\\\[\\\\{\\\\(\\\\-]'\n      , dec_dashes = '&#8211;|&#8212;'\n      , re_opening_single_quotes = re(\n          '('+\n                      '\\\\s|'+     // a whitespace char, or\n                   '&nbsp;|'+     // a non-breaking space entity, or\n                       '--|'+     // dashes, or\n               '&[mn]dash;|'+     // named dash entities\n            dec_dashes + '|'+     // or decimal entities\n             '&#x201[34];'+       // or hex\n          ')'+\n          '\\''+                   // the quote\n         '(?=\\\\w)', 'g')          // followed by a word character\n      , re_closing_single_quotes = re(\n          '('+close_cls+')'+\n          '\\''+                       //                      *\n          '(?!\\\\s | s\\\\b | \\\\d)' , 'g')  // ??? may be: '(?!\\s | \\s\\b | \\d)'\n      , re_closing_single_quotes2 = re(\n          '('+close_cls+')'+\n          '\\''+                   //                      *\n          '(?!\\\\s | s\\\\b)', 'g')    // ??? may be: '(?!\\s | \\s\\b)'\n      , re_opening_double_quotes = re(\n          '('+\n                      '\\\\s|'+     // a whitespace char, or\n                   '&nbsp;|'+     // a non-breaking space entity, or\n                       '--|'+     // dashes, or\n               '&[mn]dash;|'+     // named dash entities\n            dec_dashes + '|'+     // or decimal entities\n             '&#x201[34];'+       // or hex\n          ')'+\n          '\"'+                    // the quote\n          '(?=\\\\w)', 'g')         // followed by a word character\n      , re_closing_double_quotes  = re('\"(?=\\\\s)' , 'g')\n      , re_closing_double_quotes2 = re('('+close_cls+')\"', 'g');\n\n    return text\n        // Special case if the very first character is a quote\n        // followed by punctuation at a non-word-break.\n        // Close the quotes by brute force:\n        .replace(re(\"^'%s\".replace('%s', re_punct_str), 'g'), '&#8217;')\n        .replace(re('^\"%s'.replace('%s', re_punct_str), 'g'), '&#8221;')\n\n        // Special case for double sets of quotes, e.g.:\n        //  <p>He said, \"'Quoted' words in a larger quote.\"</p>\n        .replace(/\"'(?=\\w)/g, '&#8220;&#8216;')\n        .replace(/'\"(?=\\w)/g, '&#8216;&#8220;')\n\n        // Special case for decade abbreviations (the '80s):\n        .replace(/\\b'(?=\\d{2}s)/g, '&#8217;')\n\n        // Opening single quotes\n        .replace(re_opening_single_quotes, '$1&#8216;')\n        // Closing single quotes\n        .replace(re_closing_single_quotes, '$1&#8217;')\n        .replace(re_closing_single_quotes2,'$1&#8217;$2')\n        // Any remaining single quotes should be closing ones\n        .replace(\"'\", '&#8217;')\n\n        // Opening double quotes\n        .replace(re_opening_double_quotes, '$1&#8220;')\n        // Closing double quotes\n        .replace(re_closing_double_quotes, '&#8221;')\n        .replace(re_closing_double_quotes2,'$1&#8221;')\n        // Any remaining quotes should be opening ones.\n        .replace('\"', '&#8220;');\n  };\n\n  // OOP internals\n  // PS: Underscore rulez\n\n  // If typogr is called as a function, it returns a wrapped object that\n  // can be used OO-style. Wrapped objects may be chained\n  var Wrapper = function(obj) { this._wrapped = obj; };\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj, chain) {\n    return chain ? typogr(obj).chain() : obj;\n  };\n\n  // A method to easily add functions to the OOP wrapper.\n  var addToWrapper = function(name, func) {\n    Wrapper.prototype[name] = function() {\n      return result( func.call(typogr, this._wrapped), this._chain);\n    };\n  };\n\n  // Is a given value a function?\n  var isFunction = function(obj) {\n    return !!(obj && obj.constructor && obj.call && obj.apply);\n  };\n\n  // Add all of the typogr functions to the wrapper object.\n  var name;\n  for (name in typogr) {\n    if ( typogr.hasOwnProperty(name) && isFunction(typogr[name]) ) {\n      addToWrapper(name, typogr[name]);\n    }\n  }\n\n  // Start chaining a wrapped typogr object.\n  Wrapper.prototype.chain = function() {\n    this._chain = true;\n    return this;\n  };\n\n  // Extracts the result from a wrapped and chained object.\n  Wrapper.prototype.value = function() {\n    return this._wrapped;\n  };\n\n}(this));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/typogr@0.6.7/node_modules/typogr/typogr.js\n");

/***/ })

};
;